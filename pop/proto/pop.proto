syntax = "proto3";

package pop;

import "empty.proto";

// Service definition.
service Pop {
  // Containers returns the containers available in the PoP, either 
  // created or running.
  rpc Containers(Filter) returns (ContainerList);

  // Flavours returns the available flavours.
  // This doesn't make much sense with containers, but it's here to 
  // better abstract the PoP.
  rpc Flavours(Filter) returns (FlavourList);

  // Images returns the images available in the PoP.
  rpc Images(Filter) returns (ImageList);

  // Info can be used to check if the Pop is alive and if your credentials to this service are valid.
  // It also returns informations about this server.
  rpc Info(google.protobuf.Empty) returns (Infos);

  // Networks returns the available retworks in the PoP.
  rpc Networks(Filter) returns (NetworkList);

  // Login logs an user in and sets up a session.
  // The returned token should be set into the metadata 
  // of the gRPC session with key "token" to authenticate your client.
  rpc Login(Credentials) returns (Token) {}

  // Logout invalids the current token.
  rpc Logout(google.protobuf.Empty) returns (google.protobuf.Empty) {} 
}

message Container {
    string id = 1;
    repeated string names = 2;
    string image_id = 3;
    string command = 4;
    int64 created = 5;
    string status = 6;
    string extended_status = 7;
    map<string, Endpoint> endpoints = 8;
}

message ContainerList {
  repeated Container list = 1;
}

// Credentials represents the login credentials for a given user.
message Credentials {
  string username = 1;
  string password = 2;
}

message Endpoint {
  string net_id = 1;
  string endpoint_id = 2;
  Ip ipv4 = 3;
  Ip ipv6 = 4;
  string mac = 5;
}

message Filter {
  string id = 1; 
}

message Flavour {
  string id = 1;
  string name = 2;
}

message FlavourList {
  repeated Flavour list = 1;
}

message Image {
  string id = 1;
  repeated string names = 2;
  int64 created = 3;
}

message ImageList {
  repeated Image list = 1;
}

message Infos {
  string type = 1;
  string name = 2;
  int64 timestamp = 3;
}

message Ip {
  string address = 1;
  Subnet subnet = 2;
}

message Network {
  string id = 1;
  string name = 2;
  bool external = 3;
  repeated Subnet subnets = 4;
}

message NetworkList {
  repeated Network list = 1;
}

message Subnet {
  string cidr = 1;
  string gateway = 2; 
}

// Token is a token generated by the server after a successful login.
// This token should be set as metadata, to authenticate every other 
message Token {
  string value = 1;
}


